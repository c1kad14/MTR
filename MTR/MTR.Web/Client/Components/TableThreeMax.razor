@using MTR.Core.Abstractions
@using MTR.Domain
@inject IActionManager ActionManager

<div class="table-container" @ondragover:preventDefault @ondrop:preventDefault>
    <MudDropContainer T="DropItem" Items="_dropzoneItems" @ref="_container" ItemsSelector="@((item,dropzone) => item.Place == dropzone)"
                      ItemDropped="ItemUpdated" Class="d-flex flex-column flex-grow-1" @ondragover:preventDefault @ondrop:preventDefault>
        <ChildContent>
            <MudGrid Justify="Justify.SpaceEvenly">
                <MudItem xs="5">
                    <OtherPlayerCards Count="5" />
                </MudItem>

                <MudItem xs="2">
                    <DeckCards Count="7" />
                </MudItem>

                <MudItem xs="5">
                    <OtherPlayerCards Count="7" />
                </MudItem>

                <MudItem xs="10">
                    <div Class="d-flex flex-column align-center justify-center mud-width-full py-8">
                        <MudText Typo="Typo.h6" Align="Align.Center">BOARD</MudText>
                        <div class="d-flex flex-wrap justify-space-between board rounded-lg b border-1 border-success">
                            @for (var i = 1; i <= 6; i++)
                            {
                                var id = i.ToString();
                                <MudDropZone T="DropItem" Identifier="@id" CanDrop="@((item) => CanDrop(item, id))" CanDropClass="mud-border-success" NoDropClass="mud-border-error" Class="border-1 flex-grow-1 d-flex flex-wrap board-container"></MudDropZone>
                            }
                        </div>
                    </div>
                </MudItem>

                <MudItem xs="8" hidden>
                    <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8">
                        <MudText Typo="Typo.h6" Align="Align.Center">MUCK</MudText>
                    </MudPaper>
                </MudItem>

                <MudItem xs="8">
                    <div Class="d-flex flex-column align-center justify-center mud-width-full py-8">
                        <MudDropZone T="DropItem" Identifier="Hand" CanDrop="@((item) => false)" Class="rounded-lg mud-alert-text-normal  flex-grow-1 d-flex flex-wrap player-cards hero-cards" />
                    </div>
                </MudItem>
            </MudGrid>
        </ChildContent>
        <ItemRenderer>
            <img class="board-card" src="@context.Path" @ondragover:preventDefault @ondrop:preventDefault />
        </ItemRenderer>
    </MudDropContainer>

</div>

@code {
    private MudDropContainer<DropItem>? _container;

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Place = dropItem.DropzoneIdentifier;
    }

    public bool CanDrop(DropItem item, string place)
    {
        if (_container is not null)
        {
            return _container.Items.Count(i => i.Place == place) < 2; // TODO: pass correct data && ActionManager.CanToss(null, null, null, null);
        }

        return false;
    }

    private List<DropItem> _dropzoneItems = new()
    {
        new DropItem(){ Rank = Rank.SIX, Suit = Suit.CLUBS, Place = "Hand", Name = "6c" },
        new DropItem(){ Rank = Rank.SIX, Suit = Suit.SPADES, Place = "Hand", Name = "6s" },
        new DropItem(){ Rank = Rank.SEVEN, Suit = Suit.CLUBS, Place = "Hand", Name = "7c" },
        new DropItem(){ Rank = Rank.EIGHT, Suit = Suit.SPADES, Place = "Hand", Name = "8s" },
        new DropItem(){ Rank = Rank.EIGHT,Suit = Suit.HEARTS, Place = "Hand", Name = "8h" },
        new DropItem(){ Rank = Rank.TEN, Suit = Suit.DIAMONDS, Place = "Hand", Name = "Td" },
        new DropItem(){ Rank = Rank.ACE, Suit = Suit.SPADES, Place = "Hand", Name = "As" },
    };

    private void RefreshContainer()
    {
        //update the binding to the container
        StateHasChanged();

        //the container refreshes the internal state
        _container.Refresh();
    }

    public class DropItem
    {
        public string Name { get; set; }
        public Rank Rank { get; set; }
        public Suit Suit { get; set; }
        public string Place { get; set; }
        public string Path => $"cards/{Name}.png";
    }
}
