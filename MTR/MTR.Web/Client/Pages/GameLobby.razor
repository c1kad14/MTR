@page "/games/{guid}"
@inherits LayoutComponentBase
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@implements IDisposable

<h3>GameLobby</h3>

<MudChip Color="Color.Secondary">@game.TableType</MudChip>

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudTable Items="@players" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Score</MudTh>
                <MudTh>Ready</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Username</MudTd>
                <MudTd DataLabel="Score">@context.Score</MudTd>
                <MudTd DataLabel="Ready"><MudIcon Color="GetReady(context.IsReady)" Icon="@Icons.Material.Filled.CheckCircleOutline" /></MudTd>
            </RowTemplate>
        </MudTable>

        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ReadyClick">@(!isReady ? "Ready" : "Not ready")</MudButton>
        </MudContainer>
    </MudMainContent>

    @code {
    [Parameter]
    public string Guid { get; set; } = string.Empty;
    private Guid playerGuid;
    private bool isReady;
    private bool loading;
    private GameDto game = new();
    private List<PlayerDto> players = new();
    private HubConnection? hubConnection;

    public async Task ReadyClick()
    {
        var command = new RoundReadyCommand
            {
                RoundGuid = new Guid(Guid),
                PlayerGuid = playerGuid,
                IsReady = !isReady
            };

        var response = await Http.PostAsJsonAsync("game/ready", command);
        var result = await response.Content.ReadFromJsonAsync<Response<RoundReadyDto>>();

        if (result?.Model is not null && result.Success)
        {
            isReady = result.Model.IsReady;

            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("RoundReady", Guid, playerGuid, isReady);
            }
        }

        Snackbar.Add(result?.Message, Severity.Error);
    }

    protected override async Task OnInitializedAsync()
    {
        await ConnectAsync();

        loading = true;

        var query = new GetGameQuery(new Guid(Guid));
        var response = await Http.PostAsJsonAsync("game/getgame", query);
        var result = await response.Content.ReadFromJsonAsync<Response<GameDto>>();

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinGroup", Guid);
        }

        loading = false;

        if (result?.Success ?? false)
        {
            if (result.Model is not null)
            {
                game = result.Model;
                players = result.Model.Players;
            }
        }

        //Snackbar.Add(result.Message, Severity.Error);
    }

    void IDisposable.Dispose()
    {
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("LeaveGroup", Guid);
        }
    }

    private async Task ConnectAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<Guid, bool>("PlayerReadyChanged", (playerGuid, isReady) =>
        {
            var playerChanged = players.Single(p => p.Guid == playerGuid);
            playerChanged.IsReady = isReady;

            StateHasChanged();
        });

        hubConnection.On<Guid>("JoinGroupCallback", (playerGuid) =>
        {
            this.playerGuid = playerGuid;

            isReady = players.SingleOrDefault(p => p.Guid == playerGuid)?.IsReady ?? false;

            StateHasChanged();
        });

        hubConnection.On<PlayerDto>("PlayerJoined", (player) =>
        {
            if (players.All(p => p.Guid != player.Guid))
            {
                players.Add(player);

                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }

    private Color GetReady(bool isReady)
    {
        return isReady ? Color.Success : Color.Error;
    }
}
