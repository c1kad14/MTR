@page "/games/{GameGuid}"
@inherits LayoutComponentBase
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>GameLobby</h3>

<MudChip Color="Color.Secondary">@game.TableType</MudChip>

@if (IsMember)
{
    <MudButton Variant="Variant.Outlined" OnClick="@(LeaveGame)">Leave</MudButton>
}
else
{
    <MudButton Variant="Variant.Outlined" OnClick="@(JoinGame)">Join</MudButton>
}

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudTable Items="@players" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Score</MudTh>
                <MudTh>Ready</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Username</MudTd>
                <MudTd DataLabel="Score">@context.Score</MudTd>
                <MudTd DataLabel="Ready"><MudIcon Color="GetReady(context.IsReady)" Icon="@Icons.Material.Filled.CheckCircleOutline" /></MudTd>
            </RowTemplate>
        </MudTable>

        @if (IsMember)
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ReadyClick">@(!isReady ? "Ready" : "Not ready")</MudButton>
        }

    </MudContainer>
</MudMainContent>

@code {
    [Parameter]
    public string GameGuid { get; set; } = string.Empty;
    private Guid playerGuid;
    private bool isReady;
    private bool loading;
    private GameDto game = new();
    private List<PlayerDto> players = new();
    private HubConnection? hubConnection;
    private bool IsMember => players.Any(p => p.Guid == playerGuid);

    public async Task ReadyClick()
    {
        var command = new RoundReadyCommand
            {
                RoundGuid = new Guid(GameGuid), // first round guid is game guid
                PlayerGuid = playerGuid,
                IsReady = !isReady
            };

        var response = await Http.PostAsJsonAsync("game/ready", command);
        var result = await response.Content.ReadFromJsonAsync<Response<RoundReadyDto>>();

        if (result?.Model is not null && result.Success)
        {
            isReady = result.Model.IsReady;

            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("RoundReady", GameGuid, playerGuid, isReady);
            }
        }

        Snackbar.Add(result?.Message, Severity.Error);
    }

    private async Task JoinGame()
    {
        var gameGuid = new Guid(GameGuid);
        var command = new JoinGameCommand { Guid = gameGuid, PlayerGuid = playerGuid };
        var response = await Http.PostAsJsonAsync("game/join", command);
        var result = await response.Content.ReadFromJsonAsync<Response<GameDto>>();

        if (result is not null && result.Success)
        {
            await hubConnection!.SendAsync("JoinGame", gameGuid);
        }

        Snackbar.Add(result?.Message, Severity.Error);
    }

    private async Task LeaveGame()
    {
        var gameGuid = new Guid(GameGuid);
        var command = new LeaveGameCommand { Guid = new Guid(GameGuid), PlayerGuid = playerGuid };
        var response = await Http.PostAsJsonAsync("game/leave", command);
        var result = await response.Content.ReadFromJsonAsync<Response<GameDto>>();

        if (result is not null && result.Success)
        {
            await hubConnection!.SendAsync("LeaveGame", gameGuid, playerGuid);
        }

        Snackbar.Add(result?.Message, Severity.Error);
    }

    protected override async Task OnInitializedAsync()
    {
        await ConnectAsync();

        loading = true;

        var query = new GetGameQuery(new Guid(GameGuid));
        var response = await Http.PostAsJsonAsync("game/getgame", query);
        var result = await response.Content.ReadFromJsonAsync<Response<GameDto>>();

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinGroup", GameGuid);
        }

        loading = false;

        if (result?.Success ?? false)
        {
            if (result.Model is not null)
            {
                game = result.Model;
                players = result.Model.Players;
            }
        }

        if (playerGuid == default)
        {
            playerGuid = Guid.NewGuid();
        }

        //Snackbar.Add(result.Message, Severity.Error);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveGroup", GameGuid);
        }
    }

    private async Task ConnectAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<Guid, bool>("PlayerReadyChanged", (playerGuid, isReady) =>
        {
            var playerChanged = players.Single(p => p.Guid == playerGuid);
            playerChanged.IsReady = isReady;

            StateHasChanged();
        });

        hubConnection.On<Guid>("JoinGameCallback", (playerGuid) =>
        {
            this.playerGuid = playerGuid;

            isReady = players.SingleOrDefault(p => p.Guid == playerGuid)?.IsReady ?? false;

            StateHasChanged();
        });

        hubConnection.On<PlayerDto>("PlayerJoined", (player) =>
        {
            if (players.All(p => p.Guid != player.Guid))
            {
                players.Add(player);

                if (this.playerGuid == player.Guid)
                {
                    isReady = players.SingleOrDefault(p => p.Guid == playerGuid)?.IsReady ?? false;
                }

                StateHasChanged();
            }
        });

        hubConnection.On<Guid>("PlayerLeft", (playerGuid) =>
        {
            players = players.Where(p => p.Guid != playerGuid).ToList();

            if (this.playerGuid == playerGuid)
            {
                this.playerGuid = Guid.NewGuid();

                isReady = false;
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private Color GetReady(bool isReady)
    {
        return isReady ? Color.Success : Color.Error;
    }
}
